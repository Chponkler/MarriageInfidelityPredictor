import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from lightgbm import LGBMClassifier

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
import statsmodels.api as sm
df = sm.datasets.fair.load_pandas().data

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
df['age_marriage_ratio'] = df['age'] / (df['yrs_married'] + 0.1)  # —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ 0
df['is_high_education'] = (df['educ'] >= 16).astype(int)
df['is_high_religious'] = (df['religious'] >= 3).astype(int)

# –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
df['had_affair'] = (df['affairs'] > 0).astype(int)

# –ü—Ä–∏–∑–Ω–∞–∫–∏
X = df.drop(columns=['rate_marriage', 'affairs', 'had_affair'])
y = df['had_affair']

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = LGBMClassifier(
    random_state=42,
    n_estimators=100,
    max_depth=10,
    learning_rate=0.01,
    num_leaves=50,
    is_unbalance=True,
    verbose=-1  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ LightGBM
)
model.fit(X, y)

# –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ask_user_input():
    print("üîç –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –±—Ä–∞–∫ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –∂–µ–Ω—ã:")
    
    questions = {
        "age": "–í–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–π –∂–µ–Ω—ã (–≤ –≥–æ–¥–∞—Ö): ",
        "yrs_married": "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –≤ –±—Ä–∞–∫–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.5): ",
        "children": "–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–µ—Ç–µ–π? (0, 1, 2...): ",
        "religious": """–£—Ä–æ–≤–µ–Ω—å —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∂–µ–Ω—ã:
        1 ‚Äî –ù–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–∞
        2 ‚Äî –ù–µ–º–Ω–æ–≥–æ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–∞
        3 ‚Äî –†–µ–ª–∏–≥–∏–æ–∑–Ω–∞
        4 ‚Äî –û—á–µ–Ω—å —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–∞
–í–∞—à –≤—ã–±–æ—Ä: """,
        "educ": """–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–π –∂–µ–Ω—ã (–≤ –≥–æ–¥–∞—Ö –æ–±—É—á–µ–Ω–∏—è):
        12 ‚Äî –°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        14 ‚Äî –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç
        16 ‚Äî –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞
        18+ ‚Äî –ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞
–í–∞—à –≤—ã–±–æ—Ä: """,
        "occupation": """–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∂–µ–Ω—ã:
        1 ‚Äî –°—Ç—É–¥–µ–Ω—Ç–∫–∞
        2 ‚Äî –†–∞–±–æ—á–∞—è (—Å–∏–Ω–∏–π –≤–æ—Ä–æ—Ç–Ω–∏—á–æ–∫)
        3 ‚Äî –°–ª—É–∂–∞—â–∞—è / –æ—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        4 ‚Äî –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
        5 ‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä / —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        6 ‚Äî –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (–≤—Ä–∞—á, —é—Ä–∏—Å—Ç –∏ —Ç.–¥.)
–í–∞—à –≤—ã–±–æ—Ä: """,
        "occupation_husb": """–í–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
        1 ‚Äî –°—Ç—É–¥–µ–Ω—Ç
        2 ‚Äî –†–∞–±–æ—á–∏–π
        3 ‚Äî –°–ª—É–∂–∞—â–∏–π / –æ—Ñ–∏—Å
        4 ‚Äî –¢–µ—Ö–Ω–∞—Ä—å
        5 ‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä
        6 ‚Äî –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
–í–∞—à –≤—ã–±–æ—Ä: """
    }

    user_data = {}
    for key, question in questions.items():
        while True:
            try:
                val = float(input(question))
                user_data[key] = val
                break
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    return pd.DataFrame([user_data])

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
user_df = ask_user_input()

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
user_df['age_marriage_ratio'] = user_df['age'] / (user_df['yrs_married'] + 0.1)
user_df['is_high_education'] = (user_df['educ'] >= 16).astype(int)
user_df['is_high_religious'] = (user_df['religious'] >= 3).astype(int)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
y_pred_prob = model.predict_proba(user_df)[:, 1]
threshold = 0.35
prediction = (y_pred_prob > threshold).astype(int)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
if prediction == 1:
    print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—ã. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {y_pred_prob[0]:.2f}")
else:
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω—É. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {y_pred_prob[0]:.2f}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_importance = model.feature_importances_
features = X.columns

# –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importance, y=features)
plt.title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
plt.xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.ylabel('–ü—Ä–∏–∑–Ω–∞–∫–∏')
plt.show()

# –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
plt.figure(figsize=(6, 6))
sns.histplot(y_pred_prob, bins=20, kde=True)
plt.axvline(x=y_pred_prob[0], color='r', linestyle='--', label=f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {y_pred_prob[0]:.2f}')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–º–µ–Ω—ã')
plt.xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—ã')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
plt.legend()
plt.show()
